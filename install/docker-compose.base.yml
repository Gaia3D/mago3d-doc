version: "3.9"

networks:
  mago3d:
    external: true

volumes:
  letsencrypt:
  config-data:
  postgresql-data:
  geoserver-data:
  minio-data:
  opensearch-data:
  rabbitmq-data:
  grafana-data:
  keycloak-data:

x-networks: &networks
  mago3d:

x-logging-fluentd: &logging-fluentd
  fluentd-address: localhost:24224
  fluentd-async: "true"
  fluentd-buffer-limit: 0
  tag: docker.springboot.{{.Name}}

services:
  fluentd:
    image: ${REGISTRY}/mago3d-fluentd:latest
    command: fluentd -v
    networks: *networks

  prometheus:
    image: ${REGISTRY}/mago3d-prometheus:latest
    networks: *networks

  grafana:
    image: ${REGISTRY}/mago3d-grafana:latest
    user: '0'
    networks: *networks
    volumes:
      - grafana-data:/var/lib/grafana

  configrepo:
    image: ${REGISTRY}/mago3d-configrepo:latest
#    user: '0'
    environment:
      - GITEA__server__ROOT_URL=https://${DOMAIN}/configrepo
    networks: *networks
#    volumes:
#      - config-data:/var/lib/gitea

  configserver:
    image: ${REGISTRY}/mago3d-configserver:latest
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=http://configrepo:3000/git/config.git
      - ENCRYPT_KEY=gaia3d
    networks: *networks

  healthcheck:
    image: alpine:latest
    command: >
      sh -c "
      apk add --no-cache curl &&
      while ! curl -s -f http://configserver:8888/actuator/health > /dev/null; do
        echo 'Waiting for service to be ready...';
        sleep 5;
      done;
      echo 'Service is up!';
      sleep infinity
      "
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://configserver:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks: *networks

  postgresql:
    image: ${REGISTRY}/mago3d-postgresql:latest
    command: -c shared_buffers=128MB
    environment:
      - TZ=Asia/Seoul
      - POSTGRES_INITDB_ARGS=-k -E UTF8
    networks: *networks
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - postgresql-data:/var/lib/postgresql/data

  geoserver:
    image: ${REGISTRY}/mago3d-geoserver:latest
    environment:
      - STABLE_EXTENSIONS=ysld-plugin
      - POSTGRES_JNDI=true
      - POSTGRES_HOST=postgresql
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASS=mago3d!!
      - HTTP_SCHEME=https
      - HTTP_PROXY_NAME=${DOMAIN}
      - HTTP_PROXY_PORT=443
    networks: *networks
    volumes:
      - geoserver-data:/opt/geoserver/data_dir

  keycloak:
    image: ${REGISTRY}/mago3d-keycloak:latest
    command: start --proxy edge --hostname=${DOMAIN} --spi-theme-static-max-age=-1 --spi-theme-cache-themes=false --spi-theme-cache-templates=false
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN:-admin}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD:-admin}
    networks: *networks
    volumes:
      - keycloak-data:/opt/keycloak

  opensearch-node:
    image: ${REGISTRY}/mago3d-opensearch:latest
    environment:
      cluster.name: opensearch-cluster
      #cluster.initial_master_nodes: &master-nodes opensearch-node1,opensearch-node2,opensearch-node3
      #discovery.seed_hosts: *master-nodes
      discovery.type: single-node
      node.name: opensearch-node
      bootstrap.memory_lock: "true" # along with the memlock settings below, disables swapping
      OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
      DISABLE_SECURITY_PLUGIN: "true" # disables the OpenSearch Security Plugin, since it's not installed
      DISABLE_INSTALL_DEMO_CONFIG: "true" # disables the default dashboards, index patterns, etc.
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    networks: *networks
    volumes:
      - opensearch-data:/usr/share/opensearch/data

  opensearch-dashboard:
    image: ${REGISTRY}/mago3d-opensearch-dashboard:latest
    environment:
      - OPENSEARCH_HOSTS= ["http://opensearch-node:9200"]
      - SERVER_BASEPATH=/opensearch-dashboard
      - SERVER_REWRITEBASEPATH="true"
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN="true"
    networks: *networks

  rabbitmq:
    image: ${REGISTRY}/mago3d-rabbitmq:latest
    networks: *networks
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

  storage:
    image: ${REGISTRY}/mago3d-storage:latest
    command: server --address :9000 --console-address :9090 /data
    environment:
      - TZ=Asia/Seoul
      - MINIO_DOMAIN=${DOMAIN}
      - MINIO_SERVER_URL=https://${DOMAIN}:9000
      - MINIO_BROWSER_REDIRECT_URL=https://${DOMAIN}/minio/console
    networks: *networks
    volumes:
      - minio-data:/data
    healthcheck:
      test: curl -fSs localhost:9000/minio/health/live
      start_period: 10s

  traefik:
    image: ${REGISTRY}/mago3d-traefik:latest
    environment:
      - TZ=Asia/Seoul
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 9000
        published: 9000
        protocol: tcp
        mode: host
    networks:
      mago3d:
        aliases:
          - ${DOMAIN}
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
#      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro

  gdal-converter:
    image: ${REGISTRY}/mago3d-gdal-converter:latest
    networks: *networks
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.springboot.gdal-converter

  t3d-converter:
    image: ${REGISTRY}/mago3d-t3d-converter:latest
    networks: *networks
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.springboot.t3d-converter

  f4d-converter:
    image: ${REGISTRY}/mago3d-f4d-converter:latest
    networks: *networks
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.springboot.f4d-converter

  terrain-converter:
    image: ${REGISTRY}/mago3d-terrain-converter:latest
    networks: *networks
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.springboot.terrain-converter

  dataset:
    image: ${REGISTRY}/mago3d-dataset-app:latest
    networks: *networks
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.springboot.dataset

  userset:
    image: ${REGISTRY}/mago3d-userset-app:latest
    networks: *networks
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.springboot.userset

  layerset:
    image: ${REGISTRY}/mago3d-layerset-app:latest
    networks: *networks
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.springboot.layerset

  apidoc:
    image: ${REGISTRY}/mago3d-api-doc:latest
    networks: *networks
    deploy:
      replicas: 1

  frontend:
    image: ${REGISTRY}/mago3d-frontend:latest
    networks: *networks
    deploy:
      replicas: 1