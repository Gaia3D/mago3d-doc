version: "3.9"

name: mago3d

x-logging-fluentd: &logging-fluentd
  fluentd-address: localhost:24224
  fluentd-async: "true"

services:
  fluentd:
    environment:
      - FLUENTD_OPENSEARCH_HOSTS=opensearch-node:9200
    ports:
      - "24224:24224"
      - "24224:24224/udp"
      - "24231:24231"

  prometheus:
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`${DOMAIN}`) && PathPrefix(`/prometheus`)
      - traefik.http.routers.prometheus.entrypoints=websecure
      - traefik.http.routers.prometheus.service=prometheus
      - traefik.http.routers.prometheus.middlewares=prometheus-stripprefix
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      - traefik.http.middlewares.prometheus-stripprefix.stripPrefix.prefixes=/prometheus

  grafana:
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`${DOMAIN}`) && PathPrefix(`/grafana`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.service=grafana
      - traefik.http.services.grafana.loadbalancer.server.port=3000

  configrepo:
    labels:
      - traefik.enable=true
      - traefik.http.routers.configrepo.rule=Host(`${DOMAIN}`) && PathPrefix(`/configrepo`)
      - traefik.http.routers.configrepo.entrypoints=websecure
      - traefik.http.routers.configrepo.service=configrepo
      - traefik.http.routers.configrepo.middlewares=configrepo-stripprefix
      - traefik.http.services.configrepo.loadbalancer.server.port=3000
      - traefik.http.middlewares.configrepo-stripprefix.stripPrefix.prefixes=/configrepo

  configserver:
    labels:
      - traefik.enable=true
      - traefik.http.routers.configserver.rule=Host(`${DOMAIN}`) && PathPrefix(`/configserver`)
      - traefik.http.routers.configserver.entrypoints=websecure
      - traefik.http.routers.configserver.service=configserver
      - traefik.http.routers.configserver.middlewares=configserver-stripprefix
      - traefik.http.services.configserver.loadbalancer.server.port=8888
      - traefik.http.middlewares.configserver-stripprefix.stripPrefix.prefixes=/configserver
    depends_on:
      configrepo:
        condition: service_healthy
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.configserver

  postgresql:
    environment:
      - TZ=Asia/Seoul
      - POSTGRES_INITDB_ARGS=-k -E UTF8
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
    ports:
      - "5432:5432"

  geoserver:
    environment:
      - GEOSERVER_ADMIN_USER=${GEOSERVER_USER}
      - GEOSERVER_ADMIN_PASSWORD=${GEOSERVER_PASS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.geoserver.rule=Host(`${DOMAIN}`) && PathPrefix(`/geoserver`)
      - traefik.http.routers.geoserver.entrypoints=websecure
      - traefik.http.routers.geoserver.service=geoserver
      - traefik.http.services.geoserver.loadbalancer.sticky.cookie=true
      - traefik.http.services.geoserver.loadbalancer.server.port=8080
    depends_on:
      postgresql:
        condition: service_healthy

  keycloak:
    environment:
      - KC_DB_URL=jdbc:postgresql://postgresql/${POSTGRES_DB}
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASS}
      - KC_HOSTNAME_STRICT=false
      - KC_HTTP_RELATIVE_PATH=/auth
      - KEYCLOAK_ADMIN=${KEYCLOAK_USER}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_PASS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=Host(`${DOMAIN}`) && PathPrefix(`/auth`)
      - traefik.http.routers.keycloak.entrypoints=websecure
      - traefik.http.routers.keycloak.service=keycloak
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
    depends_on:
      postgresql:
        condition: service_healthy

  mapfish:
    labels:
      - traefik.enable=true
      - traefik.http.routers.mapfish.rule=Host(`${DOMAIN}`) && PathPrefix(`/mapfish`)
      - traefik.http.routers.mapfish.entrypoints=websecure
      - traefik.http.routers.mapfish.service=mapfish
      - traefik.http.routers.mapfish.middlewares=mapfish-redirect@docker,mapfish-stripprefix@docker
      - traefik.http.services.mapfish.loadbalancer.server.port=8080
      - traefik.http.middlewares.mapfish-stripprefix.stripprefix.prefixes=/mapfish
      - traefik.http.middlewares.mapfish-redirect.redirectRegex.regex=^(https?://[^/]+/[^/]+)$$
      - traefik.http.middlewares.mapfish-redirect.redirectRegex.replacement=$$1/
      - traefik.http.middlewares.mapfish-redirect.redirectRegex.permanent=true

  opensearch-node:
    ports:
      - "9200:9200"
#    logging:
#      driver: fluentd
#      options:
#        <<: *logging-fluentd
#        tag: docker.opensearch-node

  opensearch-dashboard:
    labels:
      - traefik.enable=true
      - traefik.http.routers.opensearch-dashboard.rule=Host(`${DOMAIN}`) && PathPrefix(`/opensearch-dashboard`)
      - traefik.http.routers.opensearch-dashboard.entrypoints=websecure
      - traefik.http.routers.opensearch-dashboard.service=opensearch-dashboard
      - traefik.http.services.opensearch-dashboard.loadbalancer.server.port=5601
    depends_on:
      - opensearch-node
#    logging:
#      driver: fluentd
#      options:
#        <<: *logging-fluentd
#        tag: docker.opensearch-dashboard

  rabbitmq:
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    labels:
      - traefik.enable=true
      - traefik.http.routers.rabbitmq-console.rule=Host(`${DOMAIN}`) && PathPrefix(`/rabbitmq`)
      - traefik.http.routers.rabbitmq-console.entrypoints=websecure
      - traefik.http.routers.rabbitmq-console.service=rabbitmq-console
      - traefik.http.services.rabbitmq-console.loadbalancer.server.port=15672
    ports:
      - "5672:5672"
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.rabbitmq

  registry:
    environment:
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Methods: '[HEAD,GET,OPTIONS,DELETE]'
      REGISTRY_HTTP_HEADERS_Access-Control-Credentials: '[true]'
      REGISTRY_HTTP_HEADERS_Access-Control-Allow-Headers: '[Authorization,Accept,Cache-Control]'
      REGISTRY_HTTP_HEADERS_Access-Control-Expose-Headers: '[Docker-Content-Digest]'
      REGISTRY_STORAGE_DELETE_ENABLED: 'true'

  registry-ui:
    ports:
      - "5000:80"

  cts:
    volumes:
      - ./terrain-data:/data/tilesets/terrain
    labels:
      - traefik.enable=true
      - traefik.http.routers.cts.rule=Host(`${DOMAIN}`) && PathPrefix(`/tilesets`)
      - traefik.http.routers.cts.entrypoints=websecure
      - traefik.http.routers.cts.service=cts
      - traefik.http.services.cts.loadbalancer.server.port=8000

  storage:
    command: server --address :9000 --console-address :9090 /data
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASS}
      - MINIO_SERVER_URL=http://${DOMAIN}:9000
    labels:
      - traefik.enable=true

      # MINIO API
      - traefik.http.routers.minio-api.rule=Host(`${DOMAIN}`)
      - traefik.http.routers.minio-api.entrypoints=minio
      - traefik.http.routers.minio-api.service=minio-api
      - traefik.http.services.minio-api.loadbalancer.server.port=9000

      # MINIO Console
      - traefik.http.routers.minio-ui.rule=Host(`${DOMAIN}`) && PathPrefix(`/minio/console`)
      - traefik.http.routers.minio-ui.entrypoints=websecure
      - traefik.http.routers.minio-ui.service=minio-ui
      - traefik.http.routers.minio-ui.middlewares=minio-ui-trailingSlash,minio-ui-stripPrefix
      - traefik.http.services.minio-ui.loadbalancer.server.port=9090
      - traefik.http.middlewares.minio-ui-stripPrefix.stripprefix.prefixes=/minio/console
      - traefik.http.middlewares.minio-ui-trailingSlash.redirectRegex.regex=^(https?://[^/]+/[^/]+)$$
      - traefik.http.middlewares.minio-ui-trailingSlash.redirectRegex.replacement=$1/
      - traefik.http.middlewares.minio-ui-trailingSlash.redirectRegex.permanent=true

    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.minio

    # 로컬 환경에서 DOMAIN의 값을 dev.localhost으로 설정할 경우, 이는 docker DNS에서 찾을 수 없는 호스트명이다.
    # 따라서, ${DOMAIN}명을 Network alias로 추가한다.
#    networks:
#      default:
#        aliases:
#          - ${DOMAIN}
  traefik:
    command:
      - --global.checknewversion=false
      - --global.sendanonymoususage=false

      # Logging
      - --log.format=json
      - --log.level=INFO
      - --accesslog=true
      - --accesslog.format=json

      # Dashboard
      - --api.dashboard=true
      - --ping

      # Provider
      - --providers.file.directory=/etc/traefik/conf.d
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=mdtp

      # web entrypoint
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # websecure entrypoint
      - --entrypoints.websecure.address=:443
#      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certResolver=le
      # registry entrypoint
#      - --entrypoints.registry.address=:5001
#      - --entrypoints.registry.http.tls=true
      # minio entrypoint
      - --entrypoints.minio.address=:9000
      - --entrypoints.minio.http.tls=false

      # Certificate
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --certificatesresolvers.le.acme.email=yhjeong@gaia3d.com
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
#      - --certificatesresolvers.le.acme.httpchallenge=true
#      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      # Let's encrypt 인증 제한을 피하기 위해서 테스트용으로 사용하는 caServer (https://letsencrypt.org/docs/staging-environment)
#      - --certificatesresolvers.le.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
    volumes:
      - ./traefik/certs:/etc/certs:ro
      - ./letsencrypt:/letsencrypt
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.middlewares=traefik-trailingSlash
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - traefik.http.middlewares.traefik-trailingSlash.redirectRegex.regex=^(https?://[^/]+/[^/]+)$$
      - traefik.http.middlewares.traefik-trailingSlash.redirectRegex.replacement=$1/
      - traefik.http.middlewares.traefik-trailingSlash.redirectRegex.permanent=true

#
#      # Middlewares
#      - traefik.http.middlewares.stripFirstPrefix.stripPrefixRegex.regex=^/[^/]+
#      - traefik.http.middlewares.redirectTrailingSlash.redirectRegex.regex=^(https?://[^/]+/[^/]+)$$$$
#      - traefik.http.middlewares.redirectTrailingSlash.redirectRegex.replacement=$$$$1/
#      - traefik.http.middlewares.redirectTrailingSlash.redirectRegex.permanent=true
#      - traefik.http.middlewares.retryable.retry.attempts=3
    logging:
      driver: fluentd
      options:
        <<: *logging-fluentd
        tag: docker.traefik
